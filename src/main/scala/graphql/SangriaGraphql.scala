package graphql

import model.{Alcaldia, Estado, Unidad}
import repository.{RepoMbMx, RepoMbMxImpl}
import sangria.schema._
object SangriaGraphql {


  //implicit val EstadoType: ObjectType[Unit, Estado] = deriveObjectType[Unit, Estado](ObjectTypeName("Estado"))

  //val EstadoType  = deriveObjectType[Unit, Estado]()

  val EstadoType = ObjectType("Estado",
    fields[Unit, Estado](
      Field("id", IntType, resolve = _.value.id),
      Field("description", StringType, resolve = _.value.description)
    )
  )
  //case class Alcaldia(id: Int, name: String, geopolygon: String, estado: Int)
  val AlcaldiaType = ObjectType("Alcaldia",
    fields[Unit, Alcaldia](
      Field("id", IntType, resolve = _.value.id),
      Field("name", StringType, resolve = _.value.name),
      Field("geopolygon", StringType, resolve = _.value.geopolygon),
      Field("estado", IntType, resolve = _.value.estado)

    )
  )
//case class MetroBus(id: Int, vehicle_id: Int, point_latitude: String, point_longitude: String, geopoint: String, estado: Int)
  val UnidadType = ObjectType("Unidad",
    fields[Unit, Unidad](
      Field("id", IntType, resolve = _.value.id),
      Field("vehicle_id", IntType, resolve = _.value.vehicle_id),
      Field("point_latitude", StringType, resolve = _.value.point_latitude),
      Field("point_longitude", StringType, resolve = _.value.point_longitude),
      Field("geopoint", StringType, resolve = _.value.geopoint),
      Field("estado", IntType, resolve = _.value.estado)

    )
  )


  val IdEstatus = Argument("id", IntType)
  val Descripcion = Argument("description", StringType)

  val QueryType  = ObjectType("Query", "consultas",
    fields[RepoMbMx, Unit](
      Field( "estado", EstadoType,
        description = Some("Entrega un estatus x id"),
        arguments = IdEstatus :: Nil,
        resolve = ctx => ctx.ctx.findEstadoById(ctx.arg(IdEstatus))
      ),
      Field( "estados", ListType(EstadoType),
        description = Some("Entrega el listado de estatus existentes"),
        resolve = ctx => ctx.ctx.findAllEstado()
      ),
      Field( "alcaldia", AlcaldiaType,
        description = Some("Entrega una alcaldia x id"),
        arguments = IdEstatus :: Nil,
        resolve = ctx => ctx.ctx.findAlcaldiaById(ctx.arg(IdEstatus))
      ),
      Field( "alcaldias", ListType(AlcaldiaType),
        description = Some("Entrega el listado de alcaldias existentes"),
        resolve = ctx => ctx.ctx.findAllAlcaldia()
      ),
      Field( "unidad", UnidadType,
        description = Some("Entrega un unidad x id"),
        arguments = IdEstatus :: Nil,
        resolve = ctx => ctx.ctx.findUnidadById(ctx.arg(IdEstatus))
      ),
      Field( "unidades", ListType(UnidadType),
        description = Some("Entrega el listado de unidades existentes"),
        resolve = ctx => ctx.ctx.findAllUnidades()
      )
    )
  )


  val MutationType  = ObjectType( "MutationType","Actualizaciones a BD",
    fields[Unit, Unit](
      Field( "addEstado", IntType,
        description = Some("AÃ±ade un estado"),
        arguments = Descripcion :: Nil,
        resolve = sangriaContext => new RepoMbMxImpl().saveEstatusAutoGenerated(sangriaContext.arg(Descripcion))
      )
    )
  )

  val SchemaEstado  = Schema(QueryType)

}


