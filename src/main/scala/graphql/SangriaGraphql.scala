package graphql

import model.Estado
import repository.EstadoRepo
import sangria.schema._
object SangriaGraphql {


  //implicit val EstadoType: ObjectType[Unit, Estado] = deriveObjectType[Unit, Estado](ObjectTypeName("Estado"))

  //val EstadoType  = deriveObjectType[Unit, Estado]()

  val EstadoType = ObjectType("Estado",
    fields[Unit, Estado](
      Field("id", IntType, resolve = _.value.id),
      Field("description", StringType, resolve = _.value.description)
    )
  )

  val AlcaldiaType = ObjectType("Alcaldia",
    fields[Unit, Alcaldia](
      Field("id", IntType, resolve = _.value.id),
      Field("name", StringType, resolve = _.value.name),
      Field("geopolygon", StringType, resolve = _.value.geopolygon),
      Field("estado", StringType, resolve = _.value.name)

    )
  )


  case class Alcaldia(id: Int, name: String, geopolygon: String, estado: Int)


  val IdEstatus = Argument("id", IntType)
  val Descripcion = Argument("description", StringType)

  val QueryType  = ObjectType("Query", "consultas",
    fields[EstadoRepo, Unit](
      Field( "estado", EstadoType,
        description = Some("Entrega un estatus x id"),
        arguments = IdEstatus :: Nil,
        resolve = ctx => ctx.ctx.findEstadoById(ctx.arg(IdEstatus))
      ),
      Field( "estados", ListType(EstadoType),
        description = Some("Entrega el listado de estatus existentes"),
        resolve = ctx => ctx.ctx.findAllEstado()
      )
    )
  )


  val MutationType  = ObjectType( "MutationType","Actualizaciones a BD",
    fields[Unit, Unit](
      Field( "addEstado", IntType,
        description = Some("AÃ±ade un estado"),
        arguments = Descripcion :: Nil,
        resolve = sangriaContext => new EstadoRepo().saveEstatusAutoGenerated(sangriaContext.arg(Descripcion))
      )
    )
  )

  val SchemaEstado  = Schema(QueryType)

}


