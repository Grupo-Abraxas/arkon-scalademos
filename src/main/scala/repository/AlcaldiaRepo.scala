package repository

import cats.effect.unsafe.implicits.global
import cats.effect.{ExitCode, IO}
import doobie.implicits._
import doobie.util.transactor.Transactor
import model.Alcaldia

trait AlcaldiaRepo {
  def findAllAlcaldia(): List[Alcaldia]
  def findAlcaldiaById(id : Int) :Alcaldia
  def saveAlcaldiaAutoGenerated(description: String): Int
}

object AlcaldiaRepo {

  implicit class Debugger[A](io: IO[A]) {
    def debug: IO[A] = io.map { a =>
      println(s"[${Thread.currentThread().getName}] $a")
      a
    }
  }

  val xa: Transactor[IO] = Transactor.fromDriverManager[IO](
    "org.postgresql.Driver",
    "jdbc:postgresql:mtbMX",
    "userApp",
    "userAppPs"
  )

  def findAllAlcaldia(): List[Alcaldia] = {
    val query = sql"select id, name, geopolygon,  estado from t_alcaldia".query[Alcaldia]
    val action = query.stream.compile.toList
    action.transact(xa).unsafeRunSync()
  }

  def findAlcaldiaById(id: Int): Alcaldia = {
    val query = sql"select id, name, geopolygon,  estado from t_alcaldia where id = $id".query[Alcaldia]
    val action = query.unique
    action.transact(xa).unsafeRunSync()
  }

  def saveAlcaldiaAutoGenerated(id: Int, name: String, geopolygon: String,  estado: Int): Int = {
    sql"insert into t_alcaldia (id, name, geopolygon,  estado)  values ($id, $name, $geopolygon,  $estado)"
        .update.withUniqueGeneratedKeys[Int]("id")
        .transact(xa).unsafeRunSync()
  }

}

