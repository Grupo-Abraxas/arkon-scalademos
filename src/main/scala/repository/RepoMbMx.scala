package repository


import cats.effect.unsafe.implicits.global
import cats.effect.IO
import cats.implicits._
import doobie.{ Fragment, Update}
import doobie.implicits._
import doobie.util.transactor.Transactor
import model.JsonCdmx.{AlcaldiaJson, UnidadJson}
import model.{Alcaldia, Estado, Unidad}

import scala.concurrent.Future

trait RepoMbMx {
  def findAllEstado(): List[Estado]
  def findEstadoById(id : Int) :Estado
  def saveEstatusAutoGenerated(description: String): Int

  def findAllAlcaldia(): List[Alcaldia]
  def findAlcaldiaById(id: Int): Alcaldia
  def saveAlcaldiaAutoGenerated(name: String, geopolygon: String,  estado: Int): Int

  def findAllUnidades(): List[Unidad]
  def findUnidadById(id: Int): Unidad
  def saveUnidadesBatch(list : List[UnidadJson]): Int
  def saveAlcaldiasBatch(list: List[AlcaldiaJson]): Int

  def findUnidadesByIdAlcaldia(id: Seq[Int]): Future[List[Unidad]]
  def findAlcaldiaByIdVehiculo(ids: Seq[Int]): Future[List[Alcaldia]]
  def findUnidadesByIds(ids: Seq[Int]): Future[List[Unidad]]
  def findAlcaldiaByIds(ids: Seq[Int]): Future[List[Alcaldia]]


  def findAlcaldiaByIdVehiculo2(id: Int):IO[List[Alcaldia]]
  def findUnidadesByIdAlcaldia2(id:Int): IO[List[Unidad]]
}


class  RepoMbMxImpl extends RepoMbMx {

  implicit class Debugger[A](io: IO[A]) {
    def debug: IO[A] = io.map { a =>
      println(s"[${Thread.currentThread().getName}] $a")
      a
    }
  }

  val xa: Transactor[IO] = Transactor.fromDriverManager[IO](
    "org.postgresql.Driver",
    "jdbc:postgresql:mtbMX",
    "userApp",
    "userAppPs"
  )

  def findAllEstado(): List[Estado] = {
    val query = sql"select id, description from c_estatus".query[Estado]
    val action = query.stream.compile.toList
    action.transact(xa).unsafeRunSync()

  }

  def findEstadoById(id: Int): Estado = {
    val query = sql"select id,  description from c_estatus where id = $id".query[Estado]
    val action = query.unique
    action.transact(xa).unsafeRunSync()
  }

  def saveEstatusAutoGenerated(description: String): Int = {
    sql"insert into c_estatus (description) values ($description)"
      .update.withUniqueGeneratedKeys[Int]("id")
      .transact(xa).unsafeRunSync()
  }

  def findAllAlcaldia(): List[Alcaldia] = {
    val query = sql"select id, name, ST_AsGeoJSON(geopolygon) geopolygon,  estado from t_alcaldia".query[Alcaldia]
    val action = query.stream.compile.toList
    action.transact(xa).unsafeRunSync()
  }

  def findAlcaldiaById(id: Int): Alcaldia = {
    val query = sql"select id, name, geopolygon,  estado from t_alcaldia where id = $id".query[Alcaldia]
    val action = query.unique
    action.transact(xa).unsafeRunSync()
  }

  def saveAlcaldiaAutoGenerated(name: String, geopolygon: String, estado: Int): Int = {
    sql"insert into t_alcaldia ( name, geopolygon,  estado)  values ( $name, $geopolygon,  $estado)"
      .update.withUniqueGeneratedKeys[Int]("id")
      .transact(xa).unsafeRunSync()
  }

  def findAllUnidades(): List[Unidad] = {
    val query = sql"select id, vehicle_id, point_latitude, point_longitude, geopoint, estado from t_mb where estado=1".query[Unidad]
    val action = query.stream.compile.toList
    action.transact(xa).unsafeRunSync()
  }

  def findUnidadById(id: Int): Unidad = {
    val query = sql"select id, vehicle_id, point_latitude, point_longitude, geopoint, estado from t_mb where id = $id".query[Unidad]
    val action = query.unique
    action.transact(xa).unsafeRunSync()
  }

  def saveUnidadesBatch(list : List[UnidadJson]): Int = {
    val query ="insert into t_mb (id, vehicle_id, point_latitude, point_longitude, geopoint,estado) values(?,?,?,?,Point(?),1)"
    val action = Update[UnidadJson](query).updateMany(list)
    action.transact(xa).unsafeRunSync()
  }

  def saveAlcaldiasBatch(list: List[AlcaldiaJson]): Int= {
    val query ="INSERT INTO t_alcaldia (id,name, geopolygon,estado)  values (?, ?, ST_GeomFromGeoJSON (?),  1)"
    val action = Update[AlcaldiaJson](query).updateMany(list)
    action.transact(xa).unsafeRunSync()
  }


  def limpiaAlcaldias(): Int= {
    sql"delete from t_alcaldia".update.run.transact(xa).unsafeRunSync()
  }
  def limpiaUnidades(): Int= {
    sql"delete from t_mb".update.run.transact(xa).unsafeRunSync()
  }

  def findUnidadesByIds(ids: Seq[Int]): Future[List[Unidad]] = {
    val fragmentIn : Fragment = fr"IN (" ++ ids.toList.map(n =>fr"$n").intercalate(fr" , ") ++ fr")"
    val queryFr =
      fr"""select a.id, a.vehicle_id,a.point_latitude, a.point_longitude, a.geopoint,a.estado from t_mb a
      where a.id """ ++ fragmentIn
    println(queryFr)
    val action = queryFr.query[Unidad].stream.compile.toList
    action.transact(xa).unsafeToFuture()
  }

  def findUnidadesByIdAlcaldia2(id:Int): IO[List[Unidad]] = {

    val queryFr =
      sql"""select a.id, a.vehicle_id,a.point_latitude, a.point_longitude, a.geopoint,a.estado from t_mb a, t_alcaldia b
      where ST_Contains(b.geopolygon,ST_SetSRID(ST_MakePoint(a.point_longitude,a.point_latitude), 4326)  ) =true
      and b.id  = $id"""
    println(queryFr)
    val action = queryFr.query[Unidad].stream.compile.toList
    action.transact(xa)
  }

  def findAlcaldiaByIdVehiculo2(id: Int): IO[List[Alcaldia]] = {
    val queryFr =
      sql"""select b.id, b.name, b.geopolygon, b.estado from t_mb a, t_alcaldia b
      where ST_Contains(b.geopolygon,ST_SetSRID(ST_MakePoint(a.point_longitude,a.point_latitude), 4326)  ) =true
      and a.id = $id"""
    val action = queryFr.query[Alcaldia].stream.compile.toList
    action.transact(xa)
  }

  def findUnidadesByIdAlcaldia(ids: Seq[Int]): Future[List[Unidad]] = {
    val fragmentIn : Fragment = fr"IN (" ++ ids.toList.map(n =>fr"$n").intercalate(fr" , ") ++ fr")"
    val queryFr =
      fr"""select a.id, a.vehicle_id,a.point_latitude, a.point_longitude, a.geopoint,a.estado from t_mb a, t_alcaldia b
      where ST_Contains(b.geopolygon,ST_SetSRID(ST_MakePoint(a.point_longitude,a.point_latitude), 4326)  ) =true
      and b.id """ ++ fragmentIn
    println(queryFr)
    val action = queryFr.query[Unidad].stream.compile.toList
    action.transact(xa).unsafeToFuture()
  }

  def findAlcaldiaByIdVehiculo(ids: Seq[Int]): Future[List[Alcaldia]] = {
    val fragmentIn : Fragment = fr"IN (" ++ ids.toList.map(n =>fr"$n").intercalate(fr" , ") ++ fr")"
    val queryFr =
      fr"""select b.id, b.name, b.geopolygon, b.estado from t_mb a, t_alcaldia b
      where ST_Contains(b.geopolygon,ST_SetSRID(ST_MakePoint(a.point_longitude,a.point_latitude), 4326)  ) =true
      and a.id """.stripMargin ++ fragmentIn
    val action = queryFr.query[Alcaldia].stream.compile.toList
    action.transact(xa).unsafeToFuture()
  }

  def findAlcaldiaByIds(ids: Seq[Int]): Future[List[Alcaldia]] = {
    val fragmentIn : Fragment = fr"IN (" ++ ids.toList.map(n =>fr"$n").intercalate(fr" , ") ++ fr")"
    val queryFr =
      fr"""select b.id, b.name, b.geopolygon, b.estado from t_alcaldia b
      where b.id """.stripMargin ++ fragmentIn
    val action = queryFr.query[Alcaldia].stream.compile.toList
    action.transact(xa).unsafeToFuture()
  }
}