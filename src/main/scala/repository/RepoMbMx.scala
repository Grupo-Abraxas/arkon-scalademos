package repository

import cats.effect.unsafe.implicits.global
import cats.effect.IO
import doobie.{ConnectionIO, Update}
import doobie.implicits._
import doobie.util.transactor.Transactor
import model.{Alcaldia, Estado, Unidad}

trait RepoMbMx {
  def findAllEstado(): List[Estado]
  def findEstadoById(id : Int) :Estado
  def saveEstatusAutoGenerated(description: String): Int

  def findAllAlcaldia(): List[Alcaldia]
  def findAlcaldiaById(id: Int): Alcaldia
  def saveAlcaldiaAutoGenerated(name: String, geopolygon: String,  estado: Int): Int

  def findAllUnidades(): List[Unidad]
  def findUnidadById(id: Int): Unidad
  def saveUnidadAutoGenerated(vehicle_id: Int, point_latitude: String, point_longitude: String, geopoint: String, estado: Int): Int
}


class  RepoMbMxImpl extends RepoMbMx{

  implicit class Debugger[A](io:IO[A]){
    def debug: IO[A] = io.map { a =>
      println(s"[${Thread.currentThread().getName}] $a")
      a
    }
  }
  val xa: Transactor[IO] = Transactor.fromDriverManager[IO](
    "org.postgresql.Driver",
    "jdbc:postgresql:mtbMX",
    "userApp",
    "userAppPs"
  )
  def findAllEstado() : List[Estado] =
  {
      val query =sql"select id, description from c_estatus".query[Estado]
      val action = query.stream.compile.toList
      action.transact(xa).unsafeRunSync()

  }

  def findEstadoById( id : Int) : Estado =
  {
    val query =sql"select id,  description from c_estatus where id = $id".query[Estado]
    val action = query.unique
    action.transact(xa).unsafeRunSync()
  }

  def saveEstatusAutoGenerated(description: String): Int = {
    sql"insert into c_estatus (description) values ($description)"
      .update.withUniqueGeneratedKeys[Int]("id")
      .transact(xa).unsafeRunSync()
  }

  def findAllAlcaldia(): List[Alcaldia] = {
    val query = sql"select id, name, ST_AsGeoJSON(geopolygon) geopolygon,  estado from t_alcaldia".query[Alcaldia]
    val action = query.stream.compile.toList
    action.transact(xa).unsafeRunSync()
  }

  def findAlcaldiaById(id: Int): Alcaldia = {
    val query = sql"select id, name, geopolygon,  estado from t_alcaldia where id = $id".query[Alcaldia]
    val action = query.unique
    action.transact(xa).unsafeRunSync()
  }

  def saveAlcaldiaAutoGenerated(name: String, geopolygon: String,  estado: Int): Int = {
    sql"insert into t_alcaldia ( name, geopolygon,  estado)  values ( $name, $geopolygon,  $estado)"
      .update.withUniqueGeneratedKeys[Int]("id")
      .transact(xa).unsafeRunSync()
  }

  def findAllUnidades(): List[Unidad] = {
    val query = sql"select id, vehicle_id, point_latitude, point_longitude, geopoint, estado from t_mb where estado=1".query[Unidad]
    val action = query.stream.compile.toList
    action.transact(xa).unsafeRunSync()
  }

  def findUnidadById(id: Int): Unidad = {
    val query = sql"select id, vehicle_id, point_latitude, point_longitude, geopoint, estado from t_mb where id = $id".query[Unidad]
    val action = query.unique
    action.transact(xa).unsafeRunSync()
  }

  def saveUnidadAutoGenerated(vehicle_id: Int, point_latitude: String, point_longitude: String, geopoint: String, estado: Int): Int = {
    sql"insert into t_mb (vehicle_id, point_latitude, point_longitude, geopoint, estado)  values ($vehicle_id, $point_latitude, $point_longitude, $geopoint, $estado)"
      .update.withUniqueGeneratedKeys[Int]("id")
      .transact(xa).unsafeRunSync()
  }

  def saveBatchUnidadAutoGenerated(ps: List[Unidad]): ConnectionIO[Int] = {
    val sql = "insert into person (name, age) values (?, ?)"
    Update[Unidad](sql).updateMany(ps)
  }

}
