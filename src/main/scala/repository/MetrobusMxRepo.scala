package repository

import cats.effect.unsafe.implicits.global
import cats.effect.{ExitCode, IO}
import doobie.implicits._
import doobie.util.transactor.Transactor
import model.MetroBus

trait MetrobusMxRepo {
  def findAllMetrobusMx(): List[MetroBus]
  def findMetrobusMxById(id : Int) :MetroBus
  def saveMetrobusMxAutoGenerated(description: String): Int
}
object MetrobusMxRepo {

  implicit class Debugger[A](io: IO[A]) {
    def debug: IO[A] = io.map { a =>
      println(s"[${Thread.currentThread().getName}] $a")
      a
    }
  }

  val xa: Transactor[IO] = Transactor.fromDriverManager[IO](
    "org.postgresql.Driver",
    "jdbc:postgresql:mtbMX",
    "userApp",
    "userAppPs"
  )

  def findAllAlcaldia(): List[MetroBus] = {
    val query = sql"select id, vehicle_id, point_latitude, point_longitude, geopoint, estado from t_mb".query[MetroBus]
    val action = query.stream.compile.toList
    action.transact(xa).unsafeRunSync()
  }

  def findAlcaldiaById(id: Int): MetroBus = {
    val query = sql"select id, vehicle_id, point_latitude, point_longitude, geopoint, estado from t_mb where id = $id".query[MetroBus]
    val action = query.unique
    action.transact(xa).unsafeRunSync()
  }

  def saveEstatusAutoGenerated(vehicle_id: Int, point_latitude: String, point_longitude: String, geopoint: String, estado: Int): Int = {
    sql"insert into t_mb (vehicle_id, point_latitude, point_longitude, geopoint, estado)  values ($vehicle_id, $point_latitude, $point_longitude, $geopoint, $estado)"
      .update.withUniqueGeneratedKeys[Int]("id")
      .transact(xa).unsafeRunSync()
  }

}


