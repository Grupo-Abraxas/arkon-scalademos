package training.std

import cats.effect.IO
import cats.effect.unsafe.implicits.global
import doobie.implicits._
import doobie.util.transactor.Transactor
import model.{Alcaldia, Estado, Unidad}
import org.scalatest.funsuite.AnyFunSuite
import org.scalatest.matchers.must.Matchers

class DoobieDemo extends AnyFunSuite with  Matchers {

  implicit class Debugger[A](io: IO[A]) {
    def debug: IO[A] = io.map { a =>
      println(s"[${Thread.currentThread().getName}] $a")
      a
    }
  }

  val xa: Transactor[IO] = Transactor.fromDriverManager[IO](
    "org.postgresql.Driver",
    "jdbc:postgresql:mtbMX",
    "userApp",
    "userAppPs"
  )


  test("consulta el estado con id 1"){
    val query = sql"select description from c_estatus where id=1".query[String].to[List].transact(xa)
    assert(query.unsafeRunSync() == List("Activo"))

  }

  test("inserta alcaldia "){

    val polygon = "{\"type\": \"Polygon\", \"coordinates\":[[[-98.99723373999994, 19.22731068999911], [-98.99744704999993, 19.227184459999123], [-98.9974635999999, 19.226488459999103], [-98.99706316999995, 19.226423519999155], [-98.99668105999993, 19.226326379999104], [-98.99642859999992, 19.22619039999913], [-98.99638268999992, 19.226128889999114]]]}"
    val query = saveAlcaldiaAutoGenerated(-1,"test",polygon,1)
    assert(query.unsafeRunSync() == 1)

  }
  def saveAlcaldiaAutoGenerated(id: Int, name: String, geopolygon: String, estado: Int): IO[Int] = {
    sql"INSERT INTO t_alcaldia (id,name, geopolygon,estado)  values ($id, $name, ST_GeomFromGeoJSON ($geopolygon),  $estado)"
      .update.run.transact(xa)
  }

  test("consulta alcaldia test"){
    val query = sql"select id, name, ST_AsGeoJSON(geopolygon) geopolygon,  estado from t_alcaldia where id=-1".query[Alcaldia].unique.transact(xa)
    assert(query.unsafeRunSync().name == "test")

  }
  test("elimina  alcaldia test"){
    val query = sql"delete from t_alcaldia where id=-1".update.run.transact(xa)
    assert(query.unsafeRunSync() == 1)

  }

}
